Атака покемона

1) Постройте гистограмму распределения показателя атаки (Attack) у покемоно
Как мы узнали из лекции, гистограмма показывает распределение численных значений. Давайте попробуем визуализировать диапазон атаки покемонов, чтобы узнать пропорции «сильных» и «слабых». А также понять, какова примерная мода значений. В используемой базе данных переменная именуется Attack.

2) Гистограмма: постройте две переменные на одном графике
В предыдущем задании вы успешно построили распределение атаки. Давайте теперь попробуем отразить две шкалы на одном графике. Посмотрим, насколько сильно отличается распределения обычной атаки покемона и его специальной атаки.
Правда ли, что специальная атака мощнее обычной базовой атаки? Показатели специальной атаки записаны в переменной SpAtk.

3) Гистограмма: прозрачность
Отлично! Вы получили нужный результат. Но на такой график не очень удобно смотреть, правда?
Удобно подмечать, что не так с графиком, когда представляешь, что на него смотрит посторонний человек. Кратко пройдемся по ошибкам:
1) Его колонки имеют сплошную заливку. Так неудобно смотреть на некоторые значения.
2) Непонятно, каким цветом выделяется обычная атака, а каким – специальная.
3) Что на графике изображено в принципе?
Для полного понимания происходящего исправим наш график. Сначала настроим прозрачность переменных. В строках каждой переменных в методе plt.hist укажем параметр alpha и приравняем его к 0.5.

4) Гистограмма: легенда
В строках с переменными в функции plt.hist добавим аргументы label, чтобы присвоить переменной название, отражающееся в легенде. Пропишем, что label="Обычная атака" и в строке со специальной атакой label="Специальная атака". После этого добавим строчку plt.legend(), чтобы вывести эти названия в легенду.

5) Гистограмма: подписи к осям
Используем предыдущий график. Подпишем оси графика с помощью команд plt.xlabel('Название оси') и plt.ylabel('Название оси'). Для оси X укажите значение "Мощность атаки", а для Y - "Количество покемонов".

6) Точечная диаграмма
Взглянем на соотношение стандартной атаки и стандартной защиты покемонов. Правда ли, что чем покемон сильнее, тем больше его защита? Постройте точечную диаграмму, чтобы проверить это. Переменная с характеристикой атаки: 'Attack'. Переменная с характеристикой защиты: 'Defense'

7) Столбчатая диаграмма
Визуализируем частоту наблюдений по типам покемонов. Информация о типаже покемона заложена в переменной 'Type1'. Отразим частоту наблюдений по категориям с помощью столбчатой диаграммы. Напомним, что синтаксис барчарта выглядит следующим образом: df['variable'].value_counts().plot(kind = 'bar')/

8) Столбчатая диаграмма: несколько переменных.
Отлично! Теперь попытаемся отобразить пропорцию легендарных и нелегендарных покемонов в каждом виде. И сделаем мы это на одном барчарте.
Переменная легендарности обозначена в данных как Legendary. Сделайте так, чтобы в каждом типе покемона отображался столбик с количество легендарных и обычных покемонов. Помните, что для отражения данных по нескольким категориям нужно их сгруппировать перед визуализацией. Не забывайте о том, что нам понадобится функция .unstack(0), чтобы категории разделялись по цвету. Синтаксис, который может вам пригодиться:
df.groupby('grouping_variable')['categorical_variable'].value_counts().unstack(0).plot(kind = 'bar')

9) Столбчатая диаграмма: названия осей
Остался последний штрих. Давайте внутри функции plot() переименуем оси и добавим название, чтобы было понятно, о чем наша визуализация. За это отвечают параметры xlabel, ylabel, title. Пусть название оси Х будет "Тип покемонов", оси Y — "Количество", а название –"Легендарные покемоны по типам в сравнении с обычными".

CSV-файл доступен под названием "PokemonData.csv"

Важно! Чтобы сохранить результат в виде картинки, вместо plt.show() добавьте в конец файла: plt.savefig('result.png')